name: Deploy to GKE

on:
  push:
    branches:
      - main

jobs:
  determine-namespace:
    runs-on: ubuntu-latest

    outputs:
      namespace: ${{ steps.determine_namespace.outputs.namespace }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Determine namespace from commit message
      id: determine_namespace
      run: |
        COMMIT_MESSAGE=$(git log -1 --pretty=%B)
        if [[ $COMMIT_MESSAGE == *"[dev]"* ]]; then
          echo "namespace=dev"  >> $GITHUB_OUTPUT
        elif [[ $COMMIT_MESSAGE == *"[test]"* ]]; then
          echo "namespace=test"  >> $GITHUB_OUTPUT
        elif [[ $COMMIT_MESSAGE == *"[stage]"* ]]; then
          echo "namespace=stage"  >> $GITHUB_OUTPUT
        elif [[ $COMMIT_MESSAGE == *"[prod]"* ]]; then
          echo "namespace=prod"  >> $GITHUB_OUTPUT
        else
          echo "namespace=unknown"  >> $GITHUB_OUTPUT
        fi

    - name: Show determined namespace
      run: echo "Determined namespace is ${{ steps.determine_namespace.outputs.namespace }}"

  deploy:
    needs: determine-namespace
    runs-on: ubuntu-latest

    env:
      GKE_CLUSTER_NAME: jsonplaceholder-app-gke
      GKE_CLUSTER_ZONE: us-central1-f
      NAMESPACE: ${{ needs.determine-namespace.outputs.namespace }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Google Cloud CLI
      uses: 'google-github-actions/auth@v2'
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        credentials_json: '${{ secrets.GCP_SA_KEY }}'
    
    - name: Determine repository name
      id: repo_name
      run: echo "::set-output name=name::$(echo $GITHUB_REPOSITORY | cut -d '/' -f 2)"

    - name: Install Auth Plugin
      run: |
       gcloud components list
       echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
       curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
       sudo apt update
       sudo apt-get install google-cloud-sdk-gke-gcloud-auth-plugin
       echo "##vso[task.setvariable variable=USE_GKE_GCLOUD_AUTH_PLUGIN]True"
       gcloud components list
       sudo apt-get update && sudo apt-get --only-upgrade install google-cloud-sdk-app-engine-python-extras google-cloud-sdk-datalab google-cloud-sdk-config-connector google-cloud-sdk-harbourbridge google-cloud-sdk-app-engine-java google-cloud-sdk google-cloud-sdk-spanner-emulator google-cloud-sdk-package-go-module google-cloud-sdk-skaffold kubectl google-cloud-sdk-terraform-tools google-cloud-sdk-kubectl-oidc google-cloud-sdk-cbt google-cloud-sdk-log-streaming google-cloud-sdk-local-extract google-cloud-sdk-pubsub-emulator google-cloud-sdk-app-engine-grpc google-cloud-sdk-app-engine-python google-cloud-sdk-app-engine-go google-cloud-sdk-anthos-auth google-cloud-sdk-nomos google-cloud-sdk-cloud-run-proxy google-cloud-sdk-firestore-emulator google-cloud-sdk-gke-gcloud-auth-plugin google-cloud-sdk-cloud-build-local google-cloud-sdk-minikube google-cloud-sdk-kpt google-cloud-sdk-bigtable-emulator google-cloud-sdk-datastore-emulator
       gcloud components list

    - name: Log in to Docker Hub
      uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}


    - name: Set GKE Cluster Context
      run: gcloud container clusters get-credentials ${{ env.GKE_CLUSTER_NAME }} --zone ${{ env.GKE_CLUSTER_ZONE }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: stigma137/${{ steps.repo_name.outputs.name }}:latest

    - name: Set up Helm
      uses: azure/setup-helm@v1
      with:
        version: 'v3.7.0'

    - name: Deploy to GKE using Helm
      run: |
        helm upgrade --namespace ${{ env.NAMESPACE }} --recreate-pods --install -f ./charts/${{ steps.repo_name.outputs.name }}/${{ env.NAMESPACE }}-values.yaml --wait ${{ steps.repo_name.outputs.name }} ./charts/${{ steps.repo_name.outputs.name }}
